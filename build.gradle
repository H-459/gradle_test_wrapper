/*
 * This file was generated by the Gradle 'init' task.
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}


plugins {
    id "java"
    id "io.freefair.lombok" version "6.2.0"
    id "de.undercouch.download" version "4.1.2"
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.1.11"
    id "jacoco"
    id "com.diffplug.spotless" version "6.2.2"
}

spotless {
    encoding 'UTF-8'
    java {
        target '**/src/*/java/**/*.java'
        palantirJavaFormat()
        importOrder('','javax','java','\\#')
        removeUnusedImports()
    }
}

def allTestCoverageFile = "build/jacoco/allTestCoverage.exec"

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn jacocoMergeTest

    reports {
        xml.required.set true
        xml.outputLocation.set file("build/jacoco/allTestCoverage.xml")
        html.required.set true
        html.outputLocation.set file("build/jacoco/allTestCoverage/html")
    }

    def adminConsoleClasses = fileTree(dir: "admin-console/build/classes/java/main")
    def commonClasses = fileTree(dir: "common/build/classes/java/main")

    def adminConsoleSource = "admin-console/src/main/java"
    def commonSource = "common/src/main/java"

    sourceDirectories.setFrom(files([adminConsoleSource,
                                     commonSource]))
    classDirectories.setFrom(files([adminConsoleClasses,
                                    commonClasses]))
    executionData.setFrom(project.fileTree(dir: '.', include: allTestCoverageFile))
}

ext {
    b1xUtilsVersion = '5.3.0'
    cordisAPIVersion = '4.4.18'
    b1xConfigurationApiVersion = '0.2.8'
    b1xProtoCommonVersion = '1.0.8'
    algoteqVersion = 'b1-0.0.12.30'
    micronautVersion = '3.5.3'
    lombokVersion = '1.18.20'
    log4JVersion = '2.17.1'
    newRelicMicrometerVersion = '0.10.0'
    newRelicVersion = '7.9.0'
    testContainersVersion = '1.17.3'
    sendgridVersion = '4.9.2'
}

allprojects {
    group = 'one.block.b1x'
    version = '0.1'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = uri('https://packages.confluent.io/maven/') }
        maven { url = uri('https://repo.maven.apache.org/maven2') }

        maven {
            name = 'B1X'
            url = uri('https://maven.pkg.github.com/b1-as/b1x-java-utils')
            credentials {
                username System.getenv("MAVEN_USERNAME") ?: "${mavenUsername}"
                password System.getenv("MAVEN_PASSWORD") ?: "${mavenPassword}"
            }
        }

        maven {
            url 'https://blockone.jfrog.io/artifactory/b1fs-b1x-java-utils'
            credentials {
                username System.getenv("ARTIFACTORY_USERNAME") ?: "${artifactoryUsername}"
                password System.getenv("ARTIFACTORY_PASSWORD") ?: "${artifactoryPassword}"
            }
        }

        maven {
            url 'https://blockone.jfrog.io/artifactory/b1fs-algoteq-libs'
            credentials {
                username System.getenv("ARTIFACTORY_USERNAME") ?: "${artifactoryUsername}"
                password System.getenv("ARTIFACTORY_PASSWORD") ?: "${artifactoryPassword}"
            }
        }

        maven {
            url 'https://blockone.jfrog.io/artifactory/b1x-proto-common' // Common Protobuf Messages Location
            credentials {
                username System.getenv("ARTIFACTORY_USERNAME") ?: "${artifactoryUsername}"
                password System.getenv("ARTIFACTORY_PASSWORD") ?: "${artifactoryPassword}"
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.freefair.lombok'
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "jacoco"

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    task downloadNewrelic(type: Download) {
        mkdir 'newrelic'
        src 'https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip'
        dest file('newrelic')
    }

    task unzipNewrelic(type: Copy) {
        dependsOn 'downloadNewrelic'
        from zipTree(file('newrelic/newrelic-java.zip'))
        into buildDir
    }

    dependencies {

        // If we want to use Lombok + Micronaut Data, the Lombok annotationProcessor must be before the Micronaut data annotationProcessor
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        // Micronaut
        implementation platform("io.micronaut:micronaut-bom") {
            version {
                strictly "${micronautVersion}"
            }
        }
        implementation "io.micronaut:micronaut-inject"
        implementation "io.micronaut:micronaut-validation"
        implementation "io.micronaut:micronaut-runtime"
        implementation "io.micronaut:micronaut-http-server-netty"
        implementation "io.micronaut:micronaut-http-client"
        implementation "io.micronaut:micronaut-http"
        implementation "io.micronaut:micronaut-management"
        implementation "io.micronaut.security:micronaut-security"
        implementation "io.micronaut.security:micronaut-security-jwt"
        implementation "io.micronaut.micrometer:micronaut-micrometer-core"
        implementation "io.micronaut.micrometer:micronaut-micrometer-registry-prometheus"
        implementation 'io.micronaut.cache:micronaut-cache-caffeine'
        implementation "jakarta.annotation:jakarta.annotation-api"

        annotationProcessor platform("io.micronaut:micronaut-bom") {
            version {
                strictly "${micronautVersion}"
            }
        }
        annotationProcessor "io.micronaut:micronaut-inject-java"
        annotationProcessor "io.micronaut.openapi:micronaut-openapi"
        annotationProcessor "io.micronaut.data:micronaut-data-processor"
        annotationProcessor "io.micronaut:micronaut-validation"
        annotationProcessor "io.micronaut.security:micronaut-security-annotations"

        testAnnotationProcessor platform("io.micronaut:micronaut-bom") {
            version {
                strictly "${micronautVersion}"
            }
        }
        testAnnotationProcessor "io.micronaut:micronaut-inject-java"
        testAnnotationProcessor "io.micronaut.openapi:micronaut-openapi"
        testAnnotationProcessor "io.micronaut.data:micronaut-data-processor"
        testAnnotationProcessor "io.micronaut:micronaut-validation"

        // Block One Exchange
        implementation "one.block.b1x:common-utils:${b1xUtilsVersion}"
        implementation "one.block.b1x:eosio-utils:${b1xUtilsVersion}"
        implementation "one.block.b1x:security-utils:${b1xUtilsVersion}"
        implementation "one.block.b1x:event-utils:${b1xUtilsVersion}"
        implementation "one.block.b1x:abi-models:${b1xUtilsVersion}"
        implementation "one.block.b1x:rabbitmq-utils:${b1xUtilsVersion}"
        implementation "one.block.b1x:document-storage-utils:${b1xUtilsVersion}"
        implementation "one.block.b1x:query-utils:${b1xUtilsVersion}"
        implementation "com.bullish:b1x-proto-common:${b1xProtoCommonVersion}"

        // Apache
        implementation "org.apache.commons:commons-lang3:3.9"
        implementation "org.apache.httpcomponents:httpclient:4.5.10"

        // Log4J
        implementation "org.apache.logging.log4j:log4j-api:${log4JVersion}"
        implementation "org.apache.logging.log4j:log4j-core:${log4JVersion}"
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4JVersion}"

        // New Relic
        implementation "com.newrelic.agent.java:newrelic-api:${newRelicVersion}"
        compileOnly "com.newrelic.agent.java:newrelic-java:${newRelicVersion}"
        implementation "com.newrelic.telemetry:micrometer-registry-new-relic:${newRelicMicrometerVersion}"

        // Others
        implementation 'com.nimbusds:nimbus-jose-jwt:9.21.1'
        implementation 'commons-io:commons-io:2.7'
        implementation "io.swagger.core.v3:swagger-annotations:2.1.0"
        runtimeOnly "com.github.jknack:handlebars:4.1.0"

        testImplementation "org.awaitility:awaitility:3.0.0"
        testImplementation 'com.squareup.okhttp3:okhttp:4.7.2'
        testImplementation "org.mockito:mockito-core:3.3.0"
        testImplementation "org.mockito:mockito-inline:3.3.0"
        testImplementation "org.hamcrest:hamcrest:2.2"
        testImplementation "org.skyscreamer:jsonassert:1.5.0"
        testImplementation(group: 'one.block.b1x', name: 'common-utils', version: "${b1xUtilsVersion}", classifier: 'tests')
        testImplementation(group: 'one.block.b1x', name: 'eosio-utils', version: "${b1xUtilsVersion}", classifier: 'tests')
        testImplementation(group: 'one.block.b1x', name: 'security-utils', version: "${b1xUtilsVersion}", classifier: 'tests')
        testImplementation(group: 'one.block.b1x', name: 'event-utils', version: "${b1xUtilsVersion}", classifier: 'tests')

        // JUnit
        testImplementation "io.micronaut.test:micronaut-test-junit5"
        testImplementation "org.mockito:mockito-junit-jupiter:2.22.0"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:5.1.0"
        testImplementation "org.junit.jupiter:junit-jupiter-params"

        // Test containers
        testImplementation platform("org.testcontainers:testcontainers-bom:${testContainersVersion}")
        testImplementation 'org.testcontainers:testcontainers'
        testImplementation 'org.testcontainers:junit-jupiter'

        // DB Rider
        testImplementation 'com.github.database-rider:rider-junit5:1.32.3'
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    configurations.implementation {
        exclude group: "com.fasterxml.jackson.module", module: "jackson-module-blackbird"
    }

    configurations.all {
        resolutionStrategy {
            force "one.block.b1x:common-utils:${b1xUtilsVersion}"
            force "one.block.b1x:eosio-utils:${b1xUtilsVersion}"
            force "one.block.b1x:security-utils:${b1xUtilsVersion}"
            force "one.block.b1x:event-utils:${b1xUtilsVersion}"
            force "one.block.b1x:abi-models:${b1xUtilsVersion}"
            force "one.block.b1x:identifiers:${b1xUtilsVersion}"
            force "one.block.b1x:document-storage-utils:${b1xUtilsVersion}"
            force "one.block.b1x:query-utils:${b1xUtilsVersion}"
            force "one.block.b1x:quant-utils:${b1xUtilsVersion}"
            force "one.block.b1x:rabbitmq-utils:${b1xUtilsVersion}"
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    shadowJar {
        zip64 true
        mergeServiceFiles()
    }

    test {
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.required.set true
            csv.required.set false
            html.outputLocation.set file("${buildDir}/reports/jacoco/html")
        }
    }
}
